import cv2
import mediapipe as mp
import numpy as np
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
import math
from PIL import Image, ImageDraw, ImageFont
import os

class VolumeController:
    def __init__(self):
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MediaPipe ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏°‡∏∑‡∏≠
        self.mp_hands = mp.solutions.hands
        self.hands = self.mp_hands.Hands(
            static_image_mode=False,
            max_num_hands=1,
            min_detection_confidence=0.7,
            min_tracking_confidence=0.7
        )
        self.mp_draw = mp.solutions.drawing_utils
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        devices = AudioUtilities.GetSpeakers()
        interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
        self.volume = cast(interface, POINTER(IAudioEndpointVolume))
        self.volume_range = self.volume.GetVolumeRange()  # (-65.25, 0.0)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Mute
        self.is_muted = False
        self.last_volume = None  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô mute
        self.mute_gesture_count = 0  # ‡∏ô‡∏±‡∏ö‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ó‡πà‡∏≤‡∏Å‡∏≥‡∏°‡∏∑‡∏≠
        self.mute_threshold = 10  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ó‡πà‡∏≤‡∏Å‡∏≥‡∏°‡∏∑‡∏≠
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        self.window_name = '‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠'
        cv2.namedWindow(self.window_name)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        try:
            font_path = "C:/Windows/Fonts/tahoma.ttf"  # ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå Tahoma ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ß‡∏¥‡∏ô‡πÇ‡∏î‡∏ß‡∏™‡πå
            self.font = ImageFont.truetype(font_path, 32)
            self.small_font = ImageFont.truetype(font_path, 24)
            self.font_ok = True
        except:
            print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ")
            self.font_ok = False

    def get_hand_landmarks(self, frame):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏ô‡∏†‡∏≤‡∏û"""
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = self.hands.process(frame_rgb)
        return results.multi_hand_landmarks
    
    def calculate_distance(self, p1, p2):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏à‡∏∏‡∏î"""
        return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)
    
    def get_volume_percentage(self, volume_db):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå"""
        min_vol = self.volume_range[0]  # -65.25
        max_vol = self.volume_range[1]  # 0.0
        return int(((volume_db - min_vol) / (max_vol - min_vol)) * 100)
    
    def draw_volume_bar(self, frame, volume_percent):
        """‡∏ß‡∏≤‡∏î‡πÅ‡∏ñ‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
        frame_height, frame_width = frame.shape[:2]
        bar_height = int(frame_height * 0.6)  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á 60% ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
        bar_width = 30  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ö
        
        # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ñ‡∏ö (‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤)
        x1 = frame_width - 50  # ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏ß‡∏≤ 50 ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•
        y1 = int((frame_height - bar_height) / 2)
        x2 = x1 + bar_width
        y2 = y1 + bar_height
        
        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏ñ‡∏ö
        cv2.rectangle(frame, (x1, y1), (x2, y2), (200, 200, 200), 2)
        
        # ‡∏ß‡∏≤‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        bar_fill_height = int(bar_height * (volume_percent / 100))
        y2_fill = y2 - bar_fill_height
        cv2.rectangle(frame, (x1, y2), (x2, y2_fill), (0, 255, 0), cv2.FILLED)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
        cv2.putText(frame, f'{volume_percent}%', 
                   (x1 - 5, y2 + 25), 
                   cv2.FONT_HERSHEY_SIMPLEX, 
                   0.7, (255, 255, 255), 2)
    
    def put_thai_text(self, frame, text, position, font_size=32):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ö‡∏ô‡∏†‡∏≤‡∏û"""
        if not self.font_ok:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            cv2.putText(frame, text, position, cv2.FONT_HERSHEY_SIMPLEX, 
                       0.7, (255, 255, 255), 2)
            return frame

        # ‡πÅ‡∏õ‡∏•‡∏á OpenCV frame ‡πÄ‡∏õ‡πá‡∏ô PIL Image
        image = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
        draw = ImageDraw.Draw(image)
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î
        font = self.small_font if font_size < 32 else self.font
        
        # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        draw.text(position, text, font=font, fill=(255, 255, 255))
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô OpenCV frame
        return cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)

    def is_fist(self, landmarks):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡πà‡∏≤‡∏Å‡∏≥‡∏°‡∏∑‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏ô‡∏¥‡πâ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        finger_tips = [8, 12, 16, 20]  # ‡∏õ‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ, ‡∏Å‡∏•‡∏≤‡∏á, ‡∏ô‡∏≤‡∏á, ‡∏Å‡πâ‡∏≠‡∏¢
        finger_mids = [6, 10, 14, 18]  # ‡∏Ç‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ, ‡∏Å‡∏•‡∏≤‡∏á, ‡∏ô‡∏≤‡∏á, ‡∏Å‡πâ‡∏≠‡∏¢
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ô‡∏¥‡πâ‡∏ß‡∏á‡∏≠)
        fingers_bent = all(
            landmarks.landmark[tip].y > landmarks.landmark[mid].y
            for tip, mid in zip(finger_tips, finger_mids)
        )
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏¥‡πâ‡∏ß‡πÇ‡∏õ‡πâ‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ù‡πà‡∏≤‡∏°‡∏∑‡∏≠)
        thumb_tip = landmarks.landmark[4]
        thumb_base = landmarks.landmark[2]
        thumb_bent = thumb_tip.x > thumb_base.x if landmarks.landmark[0].x < 0.5 else thumb_tip.x < thumb_base.x
        
        return fingers_bent and thumb_bent

    def toggle_mute(self):
        """‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Mute/Unmute"""
        if not self.is_muted:
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô mute
            self.last_volume = self.volume.GetMasterVolumeLevelScalar()
            self.volume.SetMute(True, None)
            self.is_muted = True
        else:
            # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏¥‡∏°
            self.volume.SetMute(False, None)
            if self.last_volume is not None:
                self.volume.SetMasterVolumeLevelScalar(self.last_volume, None)
            self.is_muted = False

    def draw_mute_status(self, frame):
        """‡∏ß‡∏≤‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Mute ‡∏ö‡∏ô‡∏†‡∏≤‡∏û"""
        if self.is_muted:
            # ‡∏ß‡∏≤‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô mute ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            frame = self.put_thai_text(frame, "üîá ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á", (10, 110))
        else:
            # ‡∏ß‡∏≤‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô volume ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            frame = self.put_thai_text(frame, "üîä ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á", (10, 110))

    def process_frame(self, frame):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ü‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
        hand_landmarks = self.get_hand_landmarks(frame)
        
        if hand_landmarks:
            for landmarks in hand_landmarks:
                # ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏ö‡∏ô‡∏°‡∏∑‡∏≠
                self.mp_draw.draw_landmarks(
                    frame, landmarks, self.mp_hands.HAND_CONNECTIONS)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡πà‡∏≤‡∏Å‡∏≥‡∏°‡∏∑‡∏≠
                if self.is_fist(landmarks):
                    self.mute_gesture_count += 1
                    if self.mute_gesture_count >= self.mute_threshold:
                        self.toggle_mute()
                        self.mute_gesture_count = 0  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö
                else:
                    self.mute_gesture_count = 0  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ó‡πà‡∏≤‡∏Å‡∏≥‡∏°‡∏∑‡∏≠
                
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
                if not self.is_muted:
                    # ‡πÉ‡∏ä‡πâ‡∏õ‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏ô‡∏¥‡πâ‡∏ß‡πÇ‡∏õ‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
                    thumb_tip = landmarks.landmark[4]  # ‡∏ô‡∏¥‡πâ‡∏ß‡πÇ‡∏õ‡πâ‡∏á
                    index_tip = landmarks.landmark[8]  # ‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ
                    
                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•
                    frame_height, frame_width = frame.shape[:2]
                    thumb_x, thumb_y = int(thumb_tip.x * frame_width), int(thumb_tip.y * frame_height)
                    index_x, index_y = int(index_tip.x * frame_width), int(index_tip.y * frame_height)
                    
                    # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ô‡∏¥‡πâ‡∏ß
                    cv2.line(frame, (thumb_x, thumb_y), (index_x, index_y), (0, 255, 0), 2)
                    cv2.circle(frame, (thumb_x, thumb_y), 10, (255, 0, 0), cv2.FILLED)
                    cv2.circle(frame, (index_x, index_y), 10, (255, 0, 0), cv2.FILLED)
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                    distance = self.calculate_distance((thumb_x, thumb_y), (index_x, index_y))
                    
                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á (‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°)
                    min_distance = 20   # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ö‡∏≤‡∏™‡∏∏‡∏î)
                    max_distance = 200  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡∏±‡∏á‡∏™‡∏∏‡∏î)
                    
                    # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-100
                    volume_percent = np.interp(distance, [min_distance, max_distance], [0, 100])
                    volume_percent = min(max(volume_percent, 0), 100)  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ä‡πà‡∏ß‡∏á 0-100
                    
                    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
                    volume_db = np.interp(volume_percent, [0, 100], [self.volume_range[0], self.volume_range[1]])
                    self.volume.SetMasterVolumeLevel(volume_db, None)
                    
                    # ‡∏ß‡∏≤‡∏î‡πÅ‡∏ñ‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                    self.draw_volume_bar(frame, int(volume_percent))
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
                frame = self.put_thai_text(frame, "‡πÉ‡∏ä‡πâ‡∏ô‡∏¥‡πâ‡∏ß‡πÇ‡∏õ‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á", (10, 30))
                frame = self.put_thai_text(frame, "‡∏Å‡∏≥‡∏°‡∏∑‡∏≠‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡πÄ‡∏™‡∏µ‡∏¢‡∏á", (10, 70), 24)
                frame = self.put_thai_text(frame, "‡∏Å‡∏î 'q' ‡∏´‡∏£‡∏∑‡∏≠ ESC ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å", (10, 150), 24)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Mute
                self.draw_mute_status(frame)
        
        return frame

    def run(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        cap = cv2.VideoCapture(0)
        
        print("\n‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°:")
        print("1. ‡∏Å‡∏î 'q' ‡∏´‡∏£‡∏∑‡∏≠ 'Q'")
        print("2. ‡∏Å‡∏î 'ESC'")
        print("3. ‡∏Å‡∏î Ctrl+C ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Terminal")
        print("\n‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
        print("1. ‡πÉ‡∏ä‡πâ‡∏ô‡∏¥‡πâ‡∏ß‡πÇ‡∏õ‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
        print("2. ‡∏Å‡∏≥‡∏°‡∏∑‡∏≠‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
        
        try:
            while True:
                ret, frame = cap.read()
                if not ret:
                    break
                
                # ‡∏û‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏Å‡∏£‡∏∞‡∏à‡∏Å
                frame = cv2.flip(frame, 1)
                
                # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û
                frame = self.process_frame(frame)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                cv2.imshow(self.window_name, frame)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
                key = cv2.waitKey(1) & 0xFF
                if key in [ord('q'), ord('Q'), 27]:  # q, Q, ‡∏´‡∏£‡∏∑‡∏≠ ESC
                    print("\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°...")
                    break
        
        except KeyboardInterrupt:
            print("\n‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
        finally:
            print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á...")
            cap.release()
            cv2.destroyAllWindows()
            print("‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠...")
    print("‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
    print("1. ‡πÉ‡∏ä‡πâ‡∏ô‡∏¥‡πâ‡∏ß‡πÇ‡∏õ‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
    print("2. ‡∏¢‡∏¥‡πà‡∏á‡πÅ‡∏¢‡∏Å‡∏ô‡∏¥‡πâ‡∏ß‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏∞‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏±‡∏á")
    print("3. ‡∏Å‡∏î 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°\n")
    
    controller = VolumeController()
    controller.run()

if __name__ == '__main__':
    main() 